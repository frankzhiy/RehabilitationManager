"""
Django settings for RehabilitationManager project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-lod%yj15=abn#k5lz5&n&_54s$0f4!aticbu-rxa!z00!v$11&"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['8.130.102.191', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    "statisticsAndFeedback.apps.StatisticsandfeedbackConfig",  # 统计与反馈应用
    "followUp.apps.FollowupConfig",  # 随访应用
    "patientWarn.apps.PatientwarnConfig", # 患者预警应用
    "logsystem.apps.LogsystemConfig",  # 日志系统
    "prescription.apps.PrescriptionConfig",  # 处方应用
    "assessment.apps.AssessmentConfig",  # 评估应用
    "questionnaire.apps.QuestionnaireConfig",  # 问卷应用
    "patient_query.apps.PatientQueryConfig",  # 患者查询应用
    "pef_records.apps.PefRecordsConfig",  # 呼吸功能应用
    "discomfort.apps.DiscomfortConfig" ,  # 不适应用
    "medication.apps.MedicationConfig",  # 用药应用
    "registration.apps.RegistrationConfig",  # 注册应用
    "login.apps.LoginConfig",  # 登录应用
    "COPD.apps.CopdConfig",  # COPD应用
    "django.contrib.admin",   # 管理员站点
    "django.contrib.auth",    # 认证授权系统
    "django.contrib.contenttypes",   # 内容类型框架
    "django.contrib.sessions",   # 会话框架
    "django.contrib.messages",   # 消息框架
    "django.contrib.staticfiles",   # 静态文件服务
    "django_celery_beat",  # Celery Beat
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "RehabilitationManager.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "RehabilitationManager.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        # "ENGINE": "django.db.backends.sqlite3",
        # "NAME": BASE_DIR / "db.sqlite3",
        "ENGINE": "django.db.backends.mysql",
        "NAME": "srrCOPD",
        # 服务器
        'USER': 'zjubj',
        'PASSWORD': 'Data@base0',
        'HOST': '8.130.102.191',
        'PORT': '3306',
        # 本地
        # "USER": "root",
        # "PASSWORD": "rootdatabase",
        # "HOST": "127.0.0.1",
        # "PORT": "3306",

    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# 日志
import os
import logging
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用 Django 默认的日志配置
    'formatters': {  # 定义日志格式
        'verbose': {  # 详细格式
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {  # 简洁格式
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {  # 定义日志处理方式
        'console': {  # 控制台输出
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {  # 文件输出，带文件大小限制
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/app.log'),  # 日志文件路径
            'formatter': 'verbose',
            'maxBytes': 5 * 1024 * 1024,  # 单个文件最大 5 MB
            'backupCount': 5,  # 保留最近 5 个日志文件
        },
        'file_timed': {  # 文件输出，按天轮换
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/timed_app.log'),  # 定时轮换日志
            'formatter': 'verbose',
            'when': 'midnight',  # 每天午夜轮换
            'interval': 1,  # 每 1 天
            'backupCount': 7,  # 保留最近 7 天的日志
        },
    },
    'loggers': {  # 定义日志记录器
        'django': {  # Django 框架日志
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,  # 是否传递到父 logger
        },
        'custom_logger': {  # 自定义日志
            'handlers': ['console', 'file_timed'],  # 输出到控制台和按天轮换的日志文件
            'level': 'INFO',
            'propagate': False,
        },
    },
}


# 中间件
MIDDLEWARE += [
    'middleware.logging_middleware.LoggingMiddleware',
]

# Celery 配置
# 使用 Redis 作为 Broker
CELERY_BROKER_URL = 'redis://localhost:6379/0'

# 时区设置
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = False

# Celery Beat 调度
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'reset_patient_followup_status': {
        'task': 'followUp.tasks.reset_patient_followup_status',
        'schedule': crontab(hour=7, minute=0),
        # 'schedule': crontab(minute='*/1'),  # 每分钟执行一次
    },
}

WECHAT_APPID = 'wx0bb20ee2f1c7d370'
WECHAT_SECRET = 'd984c3eec929e302d12df461a13030c6'

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')