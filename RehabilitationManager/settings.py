"""
Django settings for RehabilitationManager project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from celery.schedules import crontab

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-lod%yj15=abn#k5lz5&n&_54s$0f4!aticbu-rxa!z00!v$11&"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['8.130.102.191', 'localhost', '127.0.0.1','biomedical.zjubj.com']


# Application definition

INSTALLED_APPS = [
    "statisticsAndFeedback.apps.StatisticsandfeedbackConfig",  # 统计与反馈应用
    "followUp.apps.FollowupConfig",  # 随访应用
    "patientWarn.apps.PatientwarnConfig", # 患者预警应用
    "logsystem.apps.LogsystemConfig",  # 日志系统
    "prescription.apps.PrescriptionConfig",  # 处方应用
    "assessment.apps.AssessmentConfig",  # 评估应用
    "questionnaire.apps.QuestionnaireConfig",  # 问卷应用
    "patient_query.apps.PatientQueryConfig",  # 患者查询应用
    "pef_records.apps.PefRecordsConfig",  # 呼吸功能应用
    "discomfort.apps.DiscomfortConfig" ,  # 不适应用
    "medication.apps.MedicationConfig",  # 用药应用
    "registration.apps.RegistrationConfig",  # 注册应用
    "login.apps.LoginConfig",  # 登录应用
    "COPD.apps.CopdConfig",  # COPD应用
    "django.contrib.admin",   # 管理员站点
    "django.contrib.auth",    # 认证授权系统
    "django.contrib.contenttypes",   # 内容类型框架
    "django.contrib.sessions",   # 会话框架
    "django.contrib.messages",   # 消息框架
    "django.contrib.staticfiles",   # 静态文件服务
    "django_celery_beat",  # Celery Beat
    "diagnosisLLM.apps.DiagnosisllmConfig",  # 诊断LLM应用
    'channels',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "RehabilitationManager.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "RehabilitationManager.wsgi.application"
ASGI_APPLICATION = 'RehabilitationManager.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        # "ENGINE": "django.db.backends.sqlite3",
        # "NAME": BASE_DIR / "db.sqlite3",
        "ENGINE": "django.db.backends.mysql",
        # "NAME": "srrCOPD",
        "NAME": "srrCOPD-production",
        # 服务器
        'USER': 'zjubj',
        'PASSWORD': 'Data@base0',
        'HOST': '8.130.102.191',
        'PORT': '3306',
        # 本地
        # "USER": "root",
        # "PASSWORD": "rootdatabase",
        # "HOST": "127.0.0.1",
        # "PORT": "3306",

    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# 日志
import os
import logging
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
from datetime import datetime

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 确保 logs 目录存在
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOGS_DIR):
    os.makedirs(LOGS_DIR)

# 启动时备份现有日志文件
def backup_existing_logs():
    current_time = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_files = ['app.log', 'timed_app.log']
    
    for log_file in log_files:
        log_path = os.path.join(LOGS_DIR, log_file)
        if os.path.exists(log_path) and os.path.getsize(log_path) > 0:
            backup_path = os.path.join(LOGS_DIR, f'{log_file}.backup_{current_time}')
            try:
                os.rename(log_path, backup_path)
            except Exception as e:
                print(f"Failed to backup {log_file}: {e}")

# 执行日志备份
backup_existing_logs()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'app.log'),
            'formatter': 'verbose',
            'maxBytes': 10 * 1024 * 1024,  # 10 MB
            'backupCount': 10,
        },
        'file_timed': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'timed_app.log'),
            'formatter': 'verbose',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,  # 保留30天
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'error.log'),
            'formatter': 'verbose',
            'maxBytes': 5 * 1024 * 1024,  # 5 MB
            'backupCount': 5,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'custom_logger': {
            'handlers': ['console', 'file_timed'],
            'level': 'INFO',
            'propagate': False,
        },
        'error_logger': {
            'handlers': ['console', 'error_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        # 减少第三方库的日志输出
        'urllib3.connectionpool': {
            'level': 'WARNING',
        },
        'requests.packages.urllib3': {
            'level': 'WARNING',
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['console', 'file'],
    },
}


# 中间件
MIDDLEWARE += [
    'middleware.logging_middleware.LoggingMiddleware',
]

# Celery 配置
CELERY_BROKER_URL = 'redis://redis:6379/0'  # 使用容器内的 redis 服务名
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = True

# Celery Beat 调度
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'reset_patient_followup_status': {
        'task': 'followUp.tasks.reset_patient_followup_status',
        'schedule': crontab(hour=7, minute=0),
        # 'schedule': crontab(minute='*/1'),  # 每分钟执行一次
    },
}

WECHAT_APPID = 'wxdbe841e1e471d6a8'
WECHAT_SECRET = '9113343fcf261648c1ad0841bcfb9351'

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels.layers.InMemoryChannelLayer',
#         'CONFIG': {
#             "hosts": [('redis', 6379)],
#         },
#     },
# }

# 修改CHANNEL_LAYERS配置
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('redis', 6379)],  # 改为这种格式
            # 或者使用新版本语法：
            # "hosts": ["redis://redis:6379/0"],
        },
    },
}